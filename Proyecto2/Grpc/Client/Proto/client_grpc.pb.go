// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: client.proto

package confproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BandService_SendBandInfo_FullMethodName = "/band_service.BandService/SendBandInfo"
)

// BandServiceClient is the client API for BandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BandServiceClient interface {
	// Método para enviar información de una banda musical.
	SendBandInfo(ctx context.Context, in *Band, opts ...grpc.CallOption) (*BandResponse, error)
}

type bandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBandServiceClient(cc grpc.ClientConnInterface) BandServiceClient {
	return &bandServiceClient{cc}
}

func (c *bandServiceClient) SendBandInfo(ctx context.Context, in *Band, opts ...grpc.CallOption) (*BandResponse, error) {
	out := new(BandResponse)
	err := c.cc.Invoke(ctx, BandService_SendBandInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BandServiceServer is the server API for BandService service.
// All implementations must embed UnimplementedBandServiceServer
// for forward compatibility
type BandServiceServer interface {
	// Método para enviar información de una banda musical.
	SendBandInfo(context.Context, *Band) (*BandResponse, error)
	mustEmbedUnimplementedBandServiceServer()
}

// UnimplementedBandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBandServiceServer struct {
}

func (UnimplementedBandServiceServer) SendBandInfo(context.Context, *Band) (*BandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBandInfo not implemented")
}
func (UnimplementedBandServiceServer) mustEmbedUnimplementedBandServiceServer() {}

// UnsafeBandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BandServiceServer will
// result in compilation errors.
type UnsafeBandServiceServer interface {
	mustEmbedUnimplementedBandServiceServer()
}

func RegisterBandServiceServer(s grpc.ServiceRegistrar, srv BandServiceServer) {
	s.RegisterService(&BandService_ServiceDesc, srv)
}

func _BandService_SendBandInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Band)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandServiceServer).SendBandInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BandService_SendBandInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandServiceServer).SendBandInfo(ctx, req.(*Band))
	}
	return interceptor(ctx, in, info, handler)
}

// BandService_ServiceDesc is the grpc.ServiceDesc for BandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "band_service.BandService",
	HandlerType: (*BandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBandInfo",
			Handler:    _BandService_SendBandInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}
